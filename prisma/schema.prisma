// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(cuid())
  email       String //Criptografado?
  nome        String
  dataEntrada DateTime
  emailVerified DateTime?
  verificado  Bytes
  senha       String? //Criptografado
  funcao      String?
  frase       String?
  estrutura ProfileStructure?
  accounts    Account[]
  links       Link[]
  paginas     Pagina[]
  posts Post[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Empresa {
  id          String   @id @default(cuid())
  nome        String
  dataEntrada DateTime
  email       String //Criptografado?
  idEmpresa   String //Criptografado
  verificado  Bytes
  senha       String? //Criptografado
  frase       String?
  links       Link[]
  paginas     Pagina[]
  posts Post[]
}

model Pagina {
  id        String  @id @default(cuid()) 
  senhaAcesso String //Criptografado
  nome      String
  funcao    String
  links     Link[]
  userId    String?
  empresaId String?
  posts Post[]

  user    User?    @relation(fields: [userId], references: [id])
  empresa Empresa? @relation(fields: [empresaId], references: [id])
}

model Link {
  id        String @id @default(cuid())
  nome      String
  path      String
  userId    String?
  empresaId String?
  paginaId  String?

  
  user    User?    @relation(fields: [userId], references: [id])
  empresa Empresa? @relation(fields: [empresaId], references: [id])
  pagina Pagina? @relation(fields: [paginaId],references: [id])
}

model Post{
  id String @id @default(cuid())
  titulo String
  text String
  subTexto String
  dataPublicacao String
  userId String?
  empresaId String?
  paginaId String? 
  fotos Foto[]
  videos Video[]
  audios Audio[]
  generoId String

  user    User?    @relation(fields: [userId], references: [id])
  empresa Empresa? @relation(fields: [empresaId], references: [id])
  pagina Pagina? @relation(fields: [paginaId],references: [id])

}

model Foto{
  id String @id @default(cuid())
  NomeArquivo String
  idPost String

  post Post @relation(fields: [idPost],references: [id])
}

model Video{
  id String @id @default(cuid())
  NomeArquivo String
  idPost String

  post Post @relation(fields: [idPost],references: [id])
}

model Audio{
  id String @id @default(cuid())
  NomeArquivo String
  idPost String

  post Post @relation(fields: [idPost],references: [id])
}

model Conversa{
  id String @id @default(cuid())
  donosUsuario String?
  receptorUsuario String?
  donoEmpresa String?
  receptorEmpresa String?
  mensagens Mensagem[]
}

model Mensagem{
  id String @id @default(cuid())
  mensagem String
  dataEnvio DateTime
  idMens String
  donoUsuario String? //esses 2 vão ter queser passados o valor dos usuarios manualmente ao criar eles.
  donoEmpresa String? //esses 2 vão ter queser passados o valor dos usuarios manualmente ao criar eles.
  
  conversa Conversa @relation(fields: [idMens],references: [id])
}

model Genero{
  id Int @id @default(autoincrement())
  nome String
}

model ProfileStructure{
  id String @id @default(cuid())
  idUser String @unique
  user User @relation(fields: [idUser],references: [id])
}